/*
 * server
 *
 * <br/>https://ncloud.apigw.ntruss.com/server/v2
 *
 * API version: 2018-07-02T09:06:17Z
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package server

import (
	"encoding/base64"
	"encoding/json"
	"io/ioutil"
	"net/http"
	"net/url"
	"reflect"
	"strings"

	. "github.com/NaverCloudPlatform/ncloud-sdk-go/server/model"
	"golang.org/x/net/context"
)

// Linger please
var (
	_ context.Context
)

type V2ApiService service

/* V2ApiService
서버인스턴스생성
* @param ctx context.Context for authentication, logging, tracing, etc.
@param createServerInstancesRequest createServerInstancesRequest
@return CreateServerInstancesResponse*/
func (a *V2ApiService) CreateServerInstances(ctx context.Context, createServerInstancesRequest CreateServerInstancesRequest) (CreateServerInstancesResponse, *http.Response, error) {
	var (
		localVarHttpMethod    = strings.ToUpper("Post")
		localVarPostBody      interface{}
		localVarFileName      string
		localVarFileBytes     []byte
		successPayloadWrapper CreateServerInstancesResponseWrapper
		successPayload        CreateServerInstancesResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/createServerInstances"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}

	localVarPostBody = &createServerInstancesRequest

	v := reflect.ValueOf(localVarPostBody).Elem().FieldByName("UserData")
	if v.IsValid() && v.CanAddr() {
		ptr := v.Addr().Interface().(**string)
		if *ptr != nil {
			**ptr = base64.StdEncoding.EncodeToString([]byte(**ptr))
		}
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return successPayload, localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		bodyBytes, _ := ioutil.ReadAll(localVarHttpResponse.Body)
		return successPayload, localVarHttpResponse, reportError("Status: %v, Body: %s", localVarHttpResponse.Status, bodyBytes)
	}

	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayloadWrapper); err != nil {
		return successPayload, localVarHttpResponse, err
	}

	return successPayloadWrapper.CreateServerInstancesResponse, localVarHttpResponse, err
}

/* V2ApiService
포트포워딩Rule추가
* @param ctx context.Context for authentication, logging, tracing, etc.
@param addPortForwardingRulesRequest addPortForwardingRulesRequest
@return AddPortForwardingRulesResponse*/
func (a *V2ApiService) AddPortForwardingRules(ctx context.Context, addPortForwardingRulesRequest AddPortForwardingRulesRequest) (AddPortForwardingRulesResponse, *http.Response, error) {
	var (
		localVarHttpMethod    = strings.ToUpper("Post")
		localVarPostBody      interface{}
		localVarFileName      string
		localVarFileBytes     []byte
		successPayloadWrapper AddPortForwardingRulesResponseWrapper
		successPayload        AddPortForwardingRulesResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/addPortForwardingRules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &addPortForwardingRulesRequest

	v := reflect.ValueOf(localVarPostBody).Elem().FieldByName("UserData")
	if v.IsValid() && v.CanAddr() {
		ptr := v.Addr().Interface().(**string)
		if *ptr != nil {
			**ptr = base64.StdEncoding.EncodeToString([]byte(**ptr))
		}
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return successPayload, localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		bodyBytes, _ := ioutil.ReadAll(localVarHttpResponse.Body)
		return successPayload, localVarHttpResponse, reportError("Status: %v, Body: %s", localVarHttpResponse.Status, bodyBytes)
	}

	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayloadWrapper); err != nil {
		return successPayload, localVarHttpResponse, err
	}

	return successPayload, localVarHttpResponse, err
}

/* V2ApiService
서버인스턴스리스트조회
* @param ctx context.Context for authentication, logging, tracing, etc.
@param getServerInstanceListRequest getServerInstanceListRequest
@return GetServerInstanceListResponse*/
func (a *V2ApiService) GetServerInstanceList(ctx context.Context, getServerInstanceListRequest GetServerInstanceListRequest) (GetServerInstanceListResponse, *http.Response, error) {
	var (
		localVarHttpMethod    = strings.ToUpper("Post")
		localVarPostBody      interface{}
		localVarFileName      string
		localVarFileBytes     []byte
		successPayloadWrapper GetServerInstanceListResponseWrapper
		successPayload        GetServerInstanceListResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/getServerInstanceList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &getServerInstanceListRequest

	v := reflect.ValueOf(localVarPostBody).Elem().FieldByName("UserData")
	if v.IsValid() && v.CanAddr() {
		ptr := v.Addr().Interface().(**string)
		if *ptr != nil {
			**ptr = base64.StdEncoding.EncodeToString([]byte(**ptr))
		}
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)

	if err != nil || localVarHttpResponse == nil {
		return successPayload, localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		bodyBytes, _ := ioutil.ReadAll(localVarHttpResponse.Body)
		return successPayload, localVarHttpResponse, reportError("Status: %v, Body: %s", localVarHttpResponse.Status, bodyBytes)
	}
	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayloadWrapper); err != nil {
		return successPayload, localVarHttpResponse, err
	}

	return successPayload, localVarHttpResponse, err
}
